server.port=8060
server.servlet.context-path=/admin
# Spring WebFlux
server.reactive.session.timeout=600
# Spring MVC
server.servlet.session.timeout=600
spring.jackson.time-zone=GMT+8
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=true
server.error.include-message=always
# Set max file size to 10MB
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
# configure swagger ui
springdoc.swagger-ui.path=/swagger-ui.html
# config options from bookshop/application.properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/bookstore?useUnicode=true&characterEncoding=UTF-8&useSSL=false
spring.datasource.username=admin
spring.datasource.password=admin
spring.jpa.hibernate.ddl-auto=update
# enable domain objects mapping to associated target database's table correspondingly
spring.jpa.generate-ddl=true
# here declare renaming strategy
spring.jpa.hibernate.naming.implicit-strategy=com.cloud.bookshop.data.support.ReNameStrategy
# display all JPA layer's SQL
spring.jpa.show-sql=true
# format SQL
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.springframework.security=DEBUG
spring.web.resources.static-locations=classpath:/static/
# take Google as OAuth2 Provider
spring.security.oauth2.client.registration.google.client-id=client-id
spring.security.oauth2.client.registration.google.client-secret=client-secret
spring.security.oauth2.client.registration.google.scope=openid, profile, email
# first step, user will be redirected to this url, user will provide username/password and receive a change-code from Google provider
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8060/admin/login/oauth2/code/google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
# second step, user will take the change-code and access this token-url, take the change-code to exchange a validate access token
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# third step, user take the access token to exchange for user info(which already configured this user info contains the OpenID)
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
# enable debug log
logging.level.org.springframework.security.oauth2=DEBUG
# dubbo config
dubbo.application.name=bookshop-service-consumer
dubbo.registry.address=zookeeper://127.0.0.1:2181
dubbo.protocol.name=dubbo
# let dubbo dynamic router allocate port
dubbo.protocol.port=-1
dubbo.scan.base-packages=com.cloud.bookshop.web ¬
